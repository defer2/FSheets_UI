(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('svelte-content-loader')) :
    typeof define === 'function' && define.amd ? define(['exports', 'svelte-content-loader'], factory) :
    (global = global || self, factory(global.ContentLoader = {}, global.ContentLoader$1));
}(this, (function (exports, ContentLoader$1) { 'use strict';

    ContentLoader$1 = ContentLoader$1 && Object.prototype.hasOwnProperty.call(ContentLoader$1, 'default') ? ContentLoader$1['default'] : ContentLoader$1;

    function noop() { }
    function assign(tar, src) {
        // @ts-ignore
        for (const k in src)
            tar[k] = src[k];
        return tar;
    }
    function run(fn) {
        return fn();
    }
    function blank_object() {
        return Object.create(null);
    }
    function run_all(fns) {
        fns.forEach(run);
    }
    function is_function(thing) {
        return typeof thing === 'function';
    }
    function safe_not_equal(a, b) {
        return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
    }
    function create_slot(definition, ctx, $$scope, fn) {
        if (definition) {
            const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);
            return definition[0](slot_ctx);
        }
    }
    function get_slot_context(definition, ctx, $$scope, fn) {
        return definition[1] && fn
            ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))
            : $$scope.ctx;
    }
    function get_slot_changes(definition, $$scope, dirty, fn) {
        if (definition[2] && fn) {
            const lets = definition[2](fn(dirty));
            if ($$scope.dirty === undefined) {
                return lets;
            }
            if (typeof lets === 'object') {
                const merged = [];
                const len = Math.max($$scope.dirty.length, lets.length);
                for (let i = 0; i < len; i += 1) {
                    merged[i] = $$scope.dirty[i] | lets[i];
                }
                return merged;
            }
            return $$scope.dirty | lets;
        }
        return $$scope.dirty;
    }
    function exclude_internal_props(props) {
        const result = {};
        for (const k in props)
            if (k[0] !== '$')
                result[k] = props[k];
        return result;
    }

    function append(target, node) {
        target.appendChild(node);
    }
    function insert(target, node, anchor) {
        target.insertBefore(node, anchor || null);
    }
    function detach(node) {
        node.parentNode.removeChild(node);
    }
    function svg_element(name) {
        return document.createElementNS('http://www.w3.org/2000/svg', name);
    }
    function text(data) {
        return document.createTextNode(data);
    }
    function space() {
        return text(' ');
    }
    function attr(node, attribute, value) {
        if (value == null)
            node.removeAttribute(attribute);
        else if (node.getAttribute(attribute) !== value)
            node.setAttribute(attribute, value);
    }
    function children(element) {
        return Array.from(element.childNodes);
    }
    function set_style(node, key, value, important) {
        node.style.setProperty(key, value, important ? 'important' : '');
    }

    let current_component;
    function set_current_component(component) {
        current_component = component;
    }

    const dirty_components = [];
    const binding_callbacks = [];
    const render_callbacks = [];
    const flush_callbacks = [];
    const resolved_promise = Promise.resolve();
    let update_scheduled = false;
    function schedule_update() {
        if (!update_scheduled) {
            update_scheduled = true;
            resolved_promise.then(flush);
        }
    }
    function add_render_callback(fn) {
        render_callbacks.push(fn);
    }
    let flushing = false;
    const seen_callbacks = new Set();
    function flush() {
        if (flushing)
            return;
        flushing = true;
        do {
            // first, call beforeUpdate functions
            // and update components
            for (let i = 0; i < dirty_components.length; i += 1) {
                const component = dirty_components[i];
                set_current_component(component);
                update(component.$$);
            }
            dirty_components.length = 0;
            while (binding_callbacks.length)
                binding_callbacks.pop()();
            // then, once components are updated, call
            // afterUpdate functions. This may cause
            // subsequent updates...
            for (let i = 0; i < render_callbacks.length; i += 1) {
                const callback = render_callbacks[i];
                if (!seen_callbacks.has(callback)) {
                    // ...so guard against infinite loops
                    seen_callbacks.add(callback);
                    callback();
                }
            }
            render_callbacks.length = 0;
        } while (dirty_components.length);
        while (flush_callbacks.length) {
            flush_callbacks.pop()();
        }
        update_scheduled = false;
        flushing = false;
        seen_callbacks.clear();
    }
    function update($$) {
        if ($$.fragment !== null) {
            $$.update();
            run_all($$.before_update);
            const dirty = $$.dirty;
            $$.dirty = [-1];
            $$.fragment && $$.fragment.p($$.ctx, dirty);
            $$.after_update.forEach(add_render_callback);
        }
    }
    const outroing = new Set();
    let outros;
    function transition_in(block, local) {
        if (block && block.i) {
            outroing.delete(block);
            block.i(local);
        }
    }
    function transition_out(block, local, detach, callback) {
        if (block && block.o) {
            if (outroing.has(block))
                return;
            outroing.add(block);
            outros.c.push(() => {
                outroing.delete(block);
                if (callback) {
                    if (detach)
                        block.d(1);
                    callback();
                }
            });
            block.o(local);
        }
    }

    function get_spread_update(levels, updates) {
        const update = {};
        const to_null_out = {};
        const accounted_for = { $$scope: 1 };
        let i = levels.length;
        while (i--) {
            const o = levels[i];
            const n = updates[i];
            if (n) {
                for (const key in o) {
                    if (!(key in n))
                        to_null_out[key] = 1;
                }
                for (const key in n) {
                    if (!accounted_for[key]) {
                        update[key] = n[key];
                        accounted_for[key] = 1;
                    }
                }
                levels[i] = n;
            }
            else {
                for (const key in o) {
                    accounted_for[key] = 1;
                }
            }
        }
        for (const key in to_null_out) {
            if (!(key in update))
                update[key] = undefined;
        }
        return update;
    }
    function get_spread_object(spread_props) {
        return typeof spread_props === 'object' && spread_props !== null ? spread_props : {};
    }
    function create_component(block) {
        block && block.c();
    }
    function mount_component(component, target, anchor) {
        const { fragment, on_mount, on_destroy, after_update } = component.$$;
        fragment && fragment.m(target, anchor);
        // onMount happens before the initial afterUpdate
        add_render_callback(() => {
            const new_on_destroy = on_mount.map(run).filter(is_function);
            if (on_destroy) {
                on_destroy.push(...new_on_destroy);
            }
            else {
                // Edge case - component was destroyed immediately,
                // most likely as a result of a binding initialising
                run_all(new_on_destroy);
            }
            component.$$.on_mount = [];
        });
        after_update.forEach(add_render_callback);
    }
    function destroy_component(component, detaching) {
        const $$ = component.$$;
        if ($$.fragment !== null) {
            run_all($$.on_destroy);
            $$.fragment && $$.fragment.d(detaching);
            // TODO null out other refs, including component.$$ (but need to
            // preserve final state?)
            $$.on_destroy = $$.fragment = null;
            $$.ctx = [];
        }
    }
    function make_dirty(component, i) {
        if (component.$$.dirty[0] === -1) {
            dirty_components.push(component);
            schedule_update();
            component.$$.dirty.fill(0);
        }
        component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));
    }
    function init(component, options, instance, create_fragment, not_equal, props, dirty = [-1]) {
        const parent_component = current_component;
        set_current_component(component);
        const prop_values = options.props || {};
        const $$ = component.$$ = {
            fragment: null,
            ctx: null,
            // state
            props,
            update: noop,
            not_equal,
            bound: blank_object(),
            // lifecycle
            on_mount: [],
            on_destroy: [],
            before_update: [],
            after_update: [],
            context: new Map(parent_component ? parent_component.$$.context : []),
            // everything else
            callbacks: blank_object(),
            dirty
        };
        let ready = false;
        $$.ctx = instance
            ? instance(component, prop_values, (i, ret, ...rest) => {
                const value = rest.length ? rest[0] : ret;
                if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {
                    if ($$.bound[i])
                        $$.bound[i](value);
                    if (ready)
                        make_dirty(component, i);
                }
                return ret;
            })
            : [];
        $$.update();
        ready = true;
        run_all($$.before_update);
        // `false` as a special case of no DOM component
        $$.fragment = create_fragment ? create_fragment($$.ctx) : false;
        if (options.target) {
            if (options.hydrate) {
                const nodes = children(options.target);
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                $$.fragment && $$.fragment.l(nodes);
                nodes.forEach(detach);
            }
            else {
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                $$.fragment && $$.fragment.c();
            }
            if (options.intro)
                transition_in(component.$$.fragment);
            mount_component(component, options.target, options.anchor);
            flush();
        }
        set_current_component(parent_component);
    }
    class SvelteComponent {
        $destroy() {
            destroy_component(this, 1);
            this.$destroy = noop;
        }
        $on(type, callback) {
            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));
            callbacks.push(callback);
            return () => {
                const index = callbacks.indexOf(callback);
                if (index !== -1)
                    callbacks.splice(index, 1);
            };
        }
        $set() {
            // overridden by instance, if it has props
        }
    }

    /* src/ContentLoader.svelte generated by Svelte v3.20.1 */

    function fallback_block(ctx) {
    	let rect;

    	return {
    		c() {
    			rect = svg_element("rect");
    			attr(rect, "width", /*width*/ ctx[8]);
    			attr(rect, "height", /*height*/ ctx[7]);
    			attr(rect, "x", "0");
    			attr(rect, "y", "0");
    			attr(rect, "rx", "5");
    			attr(rect, "ry", "5");
    		},
    		m(target, anchor) {
    			insert(target, rect, anchor);
    		},
    		p(ctx, dirty) {
    			if (dirty & /*width*/ 256) {
    				attr(rect, "width", /*width*/ ctx[8]);
    			}

    			if (dirty & /*height*/ 128) {
    				attr(rect, "height", /*height*/ ctx[7]);
    			}
    		},
    		d(detaching) {
    			if (detaching) detach(rect);
    		}
    	};
    }

    // (17:4) {#if animate}
    function create_if_block_2(ctx) {
    	let animate_1;
    	let animate_1_dur_value;

    	return {
    		c() {
    			animate_1 = svg_element("animate");
    			attr(animate_1, "dur", animate_1_dur_value = "" + (/*speed*/ ctx[9] + "s"));
    			attr(animate_1, "values", "-2; 1");
    			attr(animate_1, "attributeName", "offset");
    			attr(animate_1, "repeatCount", "indefinite");
    		},
    		m(target, anchor) {
    			insert(target, animate_1, anchor);
    		},
    		p(ctx, dirty) {
    			if (dirty & /*speed*/ 512 && animate_1_dur_value !== (animate_1_dur_value = "" + (/*speed*/ ctx[9] + "s"))) {
    				attr(animate_1, "dur", animate_1_dur_value);
    			}
    		},
    		d(detaching) {
    			if (detaching) detach(animate_1);
    		}
    	};
    }

    // (27:4) {#if animate}
    function create_if_block_1(ctx) {
    	let animate_1;
    	let animate_1_dur_value;

    	return {
    		c() {
    			animate_1 = svg_element("animate");
    			attr(animate_1, "dur", animate_1_dur_value = "" + (/*speed*/ ctx[9] + "s"));
    			attr(animate_1, "values", "-1.5; 1.5");
    			attr(animate_1, "attributeName", "offset");
    			attr(animate_1, "repeatCount", "indefinite");
    		},
    		m(target, anchor) {
    			insert(target, animate_1, anchor);
    		},
    		p(ctx, dirty) {
    			if (dirty & /*speed*/ 512 && animate_1_dur_value !== (animate_1_dur_value = "" + (/*speed*/ ctx[9] + "s"))) {
    				attr(animate_1, "dur", animate_1_dur_value);
    			}
    		},
    		d(detaching) {
    			if (detaching) detach(animate_1);
    		}
    	};
    }

    // (37:4) {#if animate}
    function create_if_block(ctx) {
    	let animate_1;
    	let animate_1_dur_value;

    	return {
    		c() {
    			animate_1 = svg_element("animate");
    			attr(animate_1, "dur", animate_1_dur_value = "" + (/*speed*/ ctx[9] + "s"));
    			attr(animate_1, "values", "-1; 2");
    			attr(animate_1, "attributeName", "offset");
    			attr(animate_1, "repeatCount", "indefinite");
    		},
    		m(target, anchor) {
    			insert(target, animate_1, anchor);
    		},
    		p(ctx, dirty) {
    			if (dirty & /*speed*/ 512 && animate_1_dur_value !== (animate_1_dur_value = "" + (/*speed*/ ctx[9] + "s"))) {
    				attr(animate_1, "dur", animate_1_dur_value);
    			}
    		},
    		d(detaching) {
    			if (detaching) detach(animate_1);
    		}
    	};
    }

    function create_fragment(ctx) {
    	let svg;
    	let title;
    	let t;
    	let rect;
    	let rect_clip_path_value;
    	let defs;
    	let clipPath;
    	let linearGradient;
    	let stop0;
    	let stop1;
    	let stop2;
    	let svg_viewBox_value;
    	let current;
    	const default_slot_template = /*$$slots*/ ctx[14].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[13], null);
    	const default_slot_or_fallback = default_slot || fallback_block(ctx);
    	let if_block0 = /*animate*/ ctx[5] && create_if_block_2(ctx);
    	let if_block1 = /*animate*/ ctx[5] && create_if_block_1(ctx);
    	let if_block2 = /*animate*/ ctx[5] && create_if_block(ctx);

    	return {
    		c() {
    			svg = svg_element("svg");
    			title = svg_element("title");
    			t = text("Loading...");
    			rect = svg_element("rect");
    			defs = svg_element("defs");
    			clipPath = svg_element("clipPath");
    			if (default_slot_or_fallback) default_slot_or_fallback.c();
    			linearGradient = svg_element("linearGradient");
    			stop0 = svg_element("stop");
    			if (if_block0) if_block0.c();
    			stop1 = svg_element("stop");
    			if (if_block1) if_block1.c();
    			stop2 = svg_element("stop");
    			if (if_block2) if_block2.c();
    			attr(title, "id", "loading-aria");
    			set_style(rect, "fill", "url(" + /*baseUrl*/ ctx[6] + "#" + /*idGradient*/ ctx[11] + ")");
    			attr(rect, "clip-path", rect_clip_path_value = "url(" + /*baseUrl*/ ctx[6] + "#" + /*idClip*/ ctx[10] + ")");
    			attr(rect, "width", /*width*/ ctx[8]);
    			attr(rect, "height", /*height*/ ctx[7]);
    			attr(rect, "x", "0");
    			attr(rect, "y", "0");
    			attr(clipPath, "id", /*idClip*/ ctx[10]);
    			attr(stop0, "stop-color", /*primaryColor*/ ctx[2]);
    			attr(stop0, "stop-opacity", /*primaryOpacity*/ ctx[4]);
    			attr(stop0, "offset", "0%");
    			attr(stop1, "stop-color", /*secondaryColor*/ ctx[1]);
    			attr(stop1, "stop-opacity", /*secondaryOpacity*/ ctx[3]);
    			attr(stop1, "offset", "50%");
    			attr(stop2, "stop-color", /*primaryColor*/ ctx[2]);
    			attr(stop2, "stop-opacity", /*primaryOpacity*/ ctx[4]);
    			attr(stop2, "offset", "100%");
    			attr(linearGradient, "id", /*idGradient*/ ctx[11]);
    			attr(svg, "width", /*width*/ ctx[8]);
    			attr(svg, "height", /*height*/ ctx[7]);
    			attr(svg, "viewBox", svg_viewBox_value = "0 0 " + /*width*/ ctx[8] + " " + /*height*/ ctx[7]);
    			attr(svg, "version", "1.1");
    			attr(svg, "ria-labelledby", "loading-aria");
    			attr(svg, "preserveAspectRatio", /*preserveAspectRatio*/ ctx[0]);
    		},
    		m(target, anchor) {
    			insert(target, svg, anchor);
    			append(svg, title);
    			append(title, t);
    			append(svg, rect);
    			append(svg, defs);
    			append(defs, clipPath);

    			if (default_slot_or_fallback) {
    				default_slot_or_fallback.m(clipPath, null);
    			}

    			append(defs, linearGradient);
    			append(linearGradient, stop0);
    			if (if_block0) if_block0.m(stop0, null);
    			append(linearGradient, stop1);
    			if (if_block1) if_block1.m(stop1, null);
    			append(linearGradient, stop2);
    			if (if_block2) if_block2.m(stop2, null);
    			current = true;
    		},
    		p(ctx, [dirty]) {
    			if (!current || dirty & /*baseUrl, idGradient*/ 2112) {
    				set_style(rect, "fill", "url(" + /*baseUrl*/ ctx[6] + "#" + /*idGradient*/ ctx[11] + ")");
    			}

    			if (!current || dirty & /*baseUrl, idClip*/ 1088 && rect_clip_path_value !== (rect_clip_path_value = "url(" + /*baseUrl*/ ctx[6] + "#" + /*idClip*/ ctx[10] + ")")) {
    				attr(rect, "clip-path", rect_clip_path_value);
    			}

    			if (!current || dirty & /*width*/ 256) {
    				attr(rect, "width", /*width*/ ctx[8]);
    			}

    			if (!current || dirty & /*height*/ 128) {
    				attr(rect, "height", /*height*/ ctx[7]);
    			}

    			if (default_slot) {
    				if (default_slot.p && dirty & /*$$scope*/ 8192) {
    					default_slot.p(get_slot_context(default_slot_template, ctx, /*$$scope*/ ctx[13], null), get_slot_changes(default_slot_template, /*$$scope*/ ctx[13], dirty, null));
    				}
    			} else {
    				if (default_slot_or_fallback && default_slot_or_fallback.p && dirty & /*width, height*/ 384) {
    					default_slot_or_fallback.p(ctx, dirty);
    				}
    			}

    			if (!current || dirty & /*idClip*/ 1024) {
    				attr(clipPath, "id", /*idClip*/ ctx[10]);
    			}

    			if (/*animate*/ ctx[5]) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);
    				} else {
    					if_block0 = create_if_block_2(ctx);
    					if_block0.c();
    					if_block0.m(stop0, null);
    				}
    			} else if (if_block0) {
    				if_block0.d(1);
    				if_block0 = null;
    			}

    			if (!current || dirty & /*primaryColor*/ 4) {
    				attr(stop0, "stop-color", /*primaryColor*/ ctx[2]);
    			}

    			if (!current || dirty & /*primaryOpacity*/ 16) {
    				attr(stop0, "stop-opacity", /*primaryOpacity*/ ctx[4]);
    			}

    			if (/*animate*/ ctx[5]) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);
    				} else {
    					if_block1 = create_if_block_1(ctx);
    					if_block1.c();
    					if_block1.m(stop1, null);
    				}
    			} else if (if_block1) {
    				if_block1.d(1);
    				if_block1 = null;
    			}

    			if (!current || dirty & /*secondaryColor*/ 2) {
    				attr(stop1, "stop-color", /*secondaryColor*/ ctx[1]);
    			}

    			if (!current || dirty & /*secondaryOpacity*/ 8) {
    				attr(stop1, "stop-opacity", /*secondaryOpacity*/ ctx[3]);
    			}

    			if (/*animate*/ ctx[5]) {
    				if (if_block2) {
    					if_block2.p(ctx, dirty);
    				} else {
    					if_block2 = create_if_block(ctx);
    					if_block2.c();
    					if_block2.m(stop2, null);
    				}
    			} else if (if_block2) {
    				if_block2.d(1);
    				if_block2 = null;
    			}

    			if (!current || dirty & /*primaryColor*/ 4) {
    				attr(stop2, "stop-color", /*primaryColor*/ ctx[2]);
    			}

    			if (!current || dirty & /*primaryOpacity*/ 16) {
    				attr(stop2, "stop-opacity", /*primaryOpacity*/ ctx[4]);
    			}

    			if (!current || dirty & /*idGradient*/ 2048) {
    				attr(linearGradient, "id", /*idGradient*/ ctx[11]);
    			}

    			if (!current || dirty & /*width*/ 256) {
    				attr(svg, "width", /*width*/ ctx[8]);
    			}

    			if (!current || dirty & /*height*/ 128) {
    				attr(svg, "height", /*height*/ ctx[7]);
    			}

    			if (!current || dirty & /*width, height*/ 384 && svg_viewBox_value !== (svg_viewBox_value = "0 0 " + /*width*/ ctx[8] + " " + /*height*/ ctx[7])) {
    				attr(svg, "viewBox", svg_viewBox_value);
    			}

    			if (!current || dirty & /*preserveAspectRatio*/ 1) {
    				attr(svg, "preserveAspectRatio", /*preserveAspectRatio*/ ctx[0]);
    			}
    		},
    		i(local) {
    			if (current) return;
    			transition_in(default_slot_or_fallback, local);
    			current = true;
    		},
    		o(local) {
    			transition_out(default_slot_or_fallback, local);
    			current = false;
    		},
    		d(detaching) {
    			if (detaching) detach(svg);
    			if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
    			if (if_block0) if_block0.d();
    			if (if_block1) if_block1.d();
    			if (if_block2) if_block2.d();
    		}
    	};
    }

    function uid() {
    	return Math.random().toString(36).substring(2);
    }

    function instance($$self, $$props, $$invalidate) {
    	let { preserveAspectRatio = "xMidYMid meet" } = $$props,
    		{ secondaryColor = "#ecebeb" } = $$props,
    		{ primaryColor = "#f9f9f9" } = $$props,
    		{ secondaryOpacity = 1 } = $$props,
    		{ primaryOpacity = 1 } = $$props,
    		{ animate = true } = $$props,
    		{ baseUrl = "" } = $$props,
    		{ height = 130 } = $$props,
    		{ width = 400 } = $$props,
    		{ speed = 2 } = $$props,
    		{ uniqueKey } = $$props;

    	let { $$slots = {}, $$scope } = $$props;

    	$$self.$set = $$props => {
    		if ("preserveAspectRatio" in $$props) $$invalidate(0, preserveAspectRatio = $$props.preserveAspectRatio);
    		if ("secondaryColor" in $$props) $$invalidate(1, secondaryColor = $$props.secondaryColor);
    		if ("primaryColor" in $$props) $$invalidate(2, primaryColor = $$props.primaryColor);
    		if ("secondaryOpacity" in $$props) $$invalidate(3, secondaryOpacity = $$props.secondaryOpacity);
    		if ("primaryOpacity" in $$props) $$invalidate(4, primaryOpacity = $$props.primaryOpacity);
    		if ("animate" in $$props) $$invalidate(5, animate = $$props.animate);
    		if ("baseUrl" in $$props) $$invalidate(6, baseUrl = $$props.baseUrl);
    		if ("height" in $$props) $$invalidate(7, height = $$props.height);
    		if ("width" in $$props) $$invalidate(8, width = $$props.width);
    		if ("speed" in $$props) $$invalidate(9, speed = $$props.speed);
    		if ("uniqueKey" in $$props) $$invalidate(12, uniqueKey = $$props.uniqueKey);
    		if ("$$scope" in $$props) $$invalidate(13, $$scope = $$props.$$scope);
    	};

    	let idClip;
    	let idGradient;

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*uniqueKey*/ 4096) {
    			 $$invalidate(10, idClip = uniqueKey ? `${uniqueKey}-idClip` : uid());
    		}

    		if ($$self.$$.dirty & /*uniqueKey*/ 4096) {
    			 $$invalidate(11, idGradient = uniqueKey ? `${uniqueKey}-idGradient` : uid());
    		}
    	};

    	return [
    		preserveAspectRatio,
    		secondaryColor,
    		primaryColor,
    		secondaryOpacity,
    		primaryOpacity,
    		animate,
    		baseUrl,
    		height,
    		width,
    		speed,
    		idClip,
    		idGradient,
    		uniqueKey,
    		$$scope,
    		$$slots
    	];
    }

    class ContentLoader extends SvelteComponent {
    	constructor(options) {
    		super();

    		init(this, options, instance, create_fragment, safe_not_equal, {
    			preserveAspectRatio: 0,
    			secondaryColor: 1,
    			primaryColor: 2,
    			secondaryOpacity: 3,
    			primaryOpacity: 4,
    			animate: 5,
    			baseUrl: 6,
    			height: 7,
    			width: 8,
    			speed: 9,
    			uniqueKey: 12
    		});
    	}
    }

    /* src/BulletListLoader.svelte generated by Svelte v3.20.1 */

    function create_default_slot(ctx) {
    	let circle0;
    	let t0;
    	let rect0;
    	let t1;
    	let circle1;
    	let t2;
    	let rect1;
    	let t3;
    	let circle2;
    	let t4;
    	let rect2;
    	let t5;
    	let circle3;
    	let t6;
    	let rect3;

    	return {
    		c() {
    			circle0 = svg_element("circle");
    			t0 = space();
    			rect0 = svg_element("rect");
    			t1 = space();
    			circle1 = svg_element("circle");
    			t2 = space();
    			rect1 = svg_element("rect");
    			t3 = space();
    			circle2 = svg_element("circle");
    			t4 = space();
    			rect2 = svg_element("rect");
    			t5 = space();
    			circle3 = svg_element("circle");
    			t6 = space();
    			rect3 = svg_element("rect");
    			attr(circle0, "cx", "10");
    			attr(circle0, "cy", "20");
    			attr(circle0, "r", "8");
    			attr(rect0, "x", "25");
    			attr(rect0, "y", "15");
    			attr(rect0, "rx", "5");
    			attr(rect0, "ry", "5");
    			attr(rect0, "width", "220");
    			attr(rect0, "height", "10");
    			attr(circle1, "cx", "10");
    			attr(circle1, "cy", "50");
    			attr(circle1, "r", "8");
    			attr(rect1, "x", "25");
    			attr(rect1, "y", "45");
    			attr(rect1, "rx", "5");
    			attr(rect1, "ry", "5");
    			attr(rect1, "width", "220");
    			attr(rect1, "height", "10");
    			attr(circle2, "cx", "10");
    			attr(circle2, "cy", "80");
    			attr(circle2, "r", "8");
    			attr(rect2, "x", "25");
    			attr(rect2, "y", "75");
    			attr(rect2, "rx", "5");
    			attr(rect2, "ry", "5");
    			attr(rect2, "width", "220");
    			attr(rect2, "height", "10");
    			attr(circle3, "cx", "10");
    			attr(circle3, "cy", "110");
    			attr(circle3, "r", "8");
    			attr(rect3, "x", "25");
    			attr(rect3, "y", "105");
    			attr(rect3, "rx", "5");
    			attr(rect3, "ry", "5");
    			attr(rect3, "width", "220");
    			attr(rect3, "height", "10");
    		},
    		m(target, anchor) {
    			insert(target, circle0, anchor);
    			insert(target, t0, anchor);
    			insert(target, rect0, anchor);
    			insert(target, t1, anchor);
    			insert(target, circle1, anchor);
    			insert(target, t2, anchor);
    			insert(target, rect1, anchor);
    			insert(target, t3, anchor);
    			insert(target, circle2, anchor);
    			insert(target, t4, anchor);
    			insert(target, rect2, anchor);
    			insert(target, t5, anchor);
    			insert(target, circle3, anchor);
    			insert(target, t6, anchor);
    			insert(target, rect3, anchor);
    		},
    		d(detaching) {
    			if (detaching) detach(circle0);
    			if (detaching) detach(t0);
    			if (detaching) detach(rect0);
    			if (detaching) detach(t1);
    			if (detaching) detach(circle1);
    			if (detaching) detach(t2);
    			if (detaching) detach(rect1);
    			if (detaching) detach(t3);
    			if (detaching) detach(circle2);
    			if (detaching) detach(t4);
    			if (detaching) detach(rect2);
    			if (detaching) detach(t5);
    			if (detaching) detach(circle3);
    			if (detaching) detach(t6);
    			if (detaching) detach(rect3);
    		}
    	};
    }

    function create_fragment$1(ctx) {
    	let current;
    	const contentloader_spread_levels = [/*$$props*/ ctx[0]];

    	let contentloader_props = {
    		$$slots: { default: [create_default_slot] },
    		$$scope: { ctx }
    	};

    	for (let i = 0; i < contentloader_spread_levels.length; i += 1) {
    		contentloader_props = assign(contentloader_props, contentloader_spread_levels[i]);
    	}

    	const contentloader = new ContentLoader({ props: contentloader_props });

    	return {
    		c() {
    			create_component(contentloader.$$.fragment);
    		},
    		m(target, anchor) {
    			mount_component(contentloader, target, anchor);
    			current = true;
    		},
    		p(ctx, [dirty]) {
    			const contentloader_changes = (dirty & /*$$props*/ 1)
    			? get_spread_update(contentloader_spread_levels, [get_spread_object(/*$$props*/ ctx[0])])
    			: {};

    			if (dirty & /*$$scope*/ 2) {
    				contentloader_changes.$$scope = { dirty, ctx };
    			}

    			contentloader.$set(contentloader_changes);
    		},
    		i(local) {
    			if (current) return;
    			transition_in(contentloader.$$.fragment, local);
    			current = true;
    		},
    		o(local) {
    			transition_out(contentloader.$$.fragment, local);
    			current = false;
    		},
    		d(detaching) {
    			destroy_component(contentloader, detaching);
    		}
    	};
    }

    function instance$1($$self, $$props, $$invalidate) {
    	$$self.$set = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    	};

    	$$props = exclude_internal_props($$props);
    	return [$$props];
    }

    class BulletListLoader extends SvelteComponent {
    	constructor(options) {
    		super();
    		init(this, options, instance$1, create_fragment$1, safe_not_equal, {});
    	}
    }

    /* src/CodeLoader.svelte generated by Svelte v3.20.1 */

    function create_default_slot$1(ctx) {
    	let rect0;
    	let t0;
    	let rect1;
    	let t1;
    	let rect2;
    	let t2;
    	let rect3;
    	let t3;
    	let rect4;
    	let t4;
    	let rect5;
    	let t5;
    	let rect6;
    	let t6;
    	let rect7;
    	let t7;
    	let rect8;

    	return {
    		c() {
    			rect0 = svg_element("rect");
    			t0 = space();
    			rect1 = svg_element("rect");
    			t1 = space();
    			rect2 = svg_element("rect");
    			t2 = space();
    			rect3 = svg_element("rect");
    			t3 = space();
    			rect4 = svg_element("rect");
    			t4 = space();
    			rect5 = svg_element("rect");
    			t5 = space();
    			rect6 = svg_element("rect");
    			t6 = space();
    			rect7 = svg_element("rect");
    			t7 = space();
    			rect8 = svg_element("rect");
    			attr(rect0, "x", "0");
    			attr(rect0, "y", "0");
    			attr(rect0, "rx", "3");
    			attr(rect0, "ry", "3");
    			attr(rect0, "width", "70");
    			attr(rect0, "height", "10");
    			attr(rect1, "x", "80");
    			attr(rect1, "y", "0");
    			attr(rect1, "rx", "3");
    			attr(rect1, "ry", "3");
    			attr(rect1, "width", "100");
    			attr(rect1, "height", "10");
    			attr(rect2, "x", "190");
    			attr(rect2, "y", "0");
    			attr(rect2, "rx", "3");
    			attr(rect2, "ry", "3");
    			attr(rect2, "width", "10");
    			attr(rect2, "height", "10");
    			attr(rect3, "x", "15");
    			attr(rect3, "y", "20");
    			attr(rect3, "rx", "3");
    			attr(rect3, "ry", "3");
    			attr(rect3, "width", "130");
    			attr(rect3, "height", "10");
    			attr(rect4, "x", "155");
    			attr(rect4, "y", "20");
    			attr(rect4, "rx", "3");
    			attr(rect4, "ry", "3");
    			attr(rect4, "width", "130");
    			attr(rect4, "height", "10");
    			attr(rect5, "x", "15");
    			attr(rect5, "y", "40");
    			attr(rect5, "rx", "3");
    			attr(rect5, "ry", "3");
    			attr(rect5, "width", "90");
    			attr(rect5, "height", "10");
    			attr(rect6, "x", "115");
    			attr(rect6, "y", "40");
    			attr(rect6, "rx", "3");
    			attr(rect6, "ry", "3");
    			attr(rect6, "width", "60");
    			attr(rect6, "height", "10");
    			attr(rect7, "x", "185");
    			attr(rect7, "y", "40");
    			attr(rect7, "rx", "3");
    			attr(rect7, "ry", "3");
    			attr(rect7, "width", "60");
    			attr(rect7, "height", "10");
    			attr(rect8, "x", "0");
    			attr(rect8, "y", "60");
    			attr(rect8, "rx", "3");
    			attr(rect8, "ry", "3");
    			attr(rect8, "width", "30");
    			attr(rect8, "height", "10");
    		},
    		m(target, anchor) {
    			insert(target, rect0, anchor);
    			insert(target, t0, anchor);
    			insert(target, rect1, anchor);
    			insert(target, t1, anchor);
    			insert(target, rect2, anchor);
    			insert(target, t2, anchor);
    			insert(target, rect3, anchor);
    			insert(target, t3, anchor);
    			insert(target, rect4, anchor);
    			insert(target, t4, anchor);
    			insert(target, rect5, anchor);
    			insert(target, t5, anchor);
    			insert(target, rect6, anchor);
    			insert(target, t6, anchor);
    			insert(target, rect7, anchor);
    			insert(target, t7, anchor);
    			insert(target, rect8, anchor);
    		},
    		d(detaching) {
    			if (detaching) detach(rect0);
    			if (detaching) detach(t0);
    			if (detaching) detach(rect1);
    			if (detaching) detach(t1);
    			if (detaching) detach(rect2);
    			if (detaching) detach(t2);
    			if (detaching) detach(rect3);
    			if (detaching) detach(t3);
    			if (detaching) detach(rect4);
    			if (detaching) detach(t4);
    			if (detaching) detach(rect5);
    			if (detaching) detach(t5);
    			if (detaching) detach(rect6);
    			if (detaching) detach(t6);
    			if (detaching) detach(rect7);
    			if (detaching) detach(t7);
    			if (detaching) detach(rect8);
    		}
    	};
    }

    function create_fragment$2(ctx) {
    	let current;
    	const contentloader_spread_levels = [/*$$props*/ ctx[0]];

    	let contentloader_props = {
    		$$slots: { default: [create_default_slot$1] },
    		$$scope: { ctx }
    	};

    	for (let i = 0; i < contentloader_spread_levels.length; i += 1) {
    		contentloader_props = assign(contentloader_props, contentloader_spread_levels[i]);
    	}

    	const contentloader = new ContentLoader({ props: contentloader_props });

    	return {
    		c() {
    			create_component(contentloader.$$.fragment);
    		},
    		m(target, anchor) {
    			mount_component(contentloader, target, anchor);
    			current = true;
    		},
    		p(ctx, [dirty]) {
    			const contentloader_changes = (dirty & /*$$props*/ 1)
    			? get_spread_update(contentloader_spread_levels, [get_spread_object(/*$$props*/ ctx[0])])
    			: {};

    			if (dirty & /*$$scope*/ 2) {
    				contentloader_changes.$$scope = { dirty, ctx };
    			}

    			contentloader.$set(contentloader_changes);
    		},
    		i(local) {
    			if (current) return;
    			transition_in(contentloader.$$.fragment, local);
    			current = true;
    		},
    		o(local) {
    			transition_out(contentloader.$$.fragment, local);
    			current = false;
    		},
    		d(detaching) {
    			destroy_component(contentloader, detaching);
    		}
    	};
    }

    function instance$2($$self, $$props, $$invalidate) {
    	$$self.$set = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    	};

    	$$props = exclude_internal_props($$props);
    	return [$$props];
    }

    class CodeLoader extends SvelteComponent {
    	constructor(options) {
    		super();
    		init(this, options, instance$2, create_fragment$2, safe_not_equal, {});
    	}
    }

    /* src/FacebookLoader.svelte generated by Svelte v3.20.1 */

    function create_default_slot$2(ctx) {
    	let rect0;
    	let t0;
    	let rect1;
    	let t1;
    	let rect2;
    	let t2;
    	let rect3;
    	let t3;
    	let rect4;
    	let t4;
    	let circle;

    	return {
    		c() {
    			rect0 = svg_element("rect");
    			t0 = space();
    			rect1 = svg_element("rect");
    			t1 = space();
    			rect2 = svg_element("rect");
    			t2 = space();
    			rect3 = svg_element("rect");
    			t3 = space();
    			rect4 = svg_element("rect");
    			t4 = space();
    			circle = svg_element("circle");
    			attr(rect0, "x", "70");
    			attr(rect0, "y", "15");
    			attr(rect0, "rx", "4");
    			attr(rect0, "ry", "4");
    			attr(rect0, "width", "117");
    			attr(rect0, "height", "6.4");
    			attr(rect1, "x", "70");
    			attr(rect1, "y", "35");
    			attr(rect1, "rx", "3");
    			attr(rect1, "ry", "3");
    			attr(rect1, "width", "85");
    			attr(rect1, "height", "6.4");
    			attr(rect2, "x", "0");
    			attr(rect2, "y", "80");
    			attr(rect2, "rx", "3");
    			attr(rect2, "ry", "3");
    			attr(rect2, "width", "350");
    			attr(rect2, "height", "6.4");
    			attr(rect3, "x", "0");
    			attr(rect3, "y", "100");
    			attr(rect3, "rx", "3");
    			attr(rect3, "ry", "3");
    			attr(rect3, "width", "380");
    			attr(rect3, "height", "6.4");
    			attr(rect4, "x", "0");
    			attr(rect4, "y", "120");
    			attr(rect4, "rx", "3");
    			attr(rect4, "ry", "3");
    			attr(rect4, "width", "201");
    			attr(rect4, "height", "6.4");
    			attr(circle, "cx", "30");
    			attr(circle, "cy", "30");
    			attr(circle, "r", "30");
    		},
    		m(target, anchor) {
    			insert(target, rect0, anchor);
    			insert(target, t0, anchor);
    			insert(target, rect1, anchor);
    			insert(target, t1, anchor);
    			insert(target, rect2, anchor);
    			insert(target, t2, anchor);
    			insert(target, rect3, anchor);
    			insert(target, t3, anchor);
    			insert(target, rect4, anchor);
    			insert(target, t4, anchor);
    			insert(target, circle, anchor);
    		},
    		d(detaching) {
    			if (detaching) detach(rect0);
    			if (detaching) detach(t0);
    			if (detaching) detach(rect1);
    			if (detaching) detach(t1);
    			if (detaching) detach(rect2);
    			if (detaching) detach(t2);
    			if (detaching) detach(rect3);
    			if (detaching) detach(t3);
    			if (detaching) detach(rect4);
    			if (detaching) detach(t4);
    			if (detaching) detach(circle);
    		}
    	};
    }

    function create_fragment$3(ctx) {
    	let current;
    	const contentloader_spread_levels = [/*$$props*/ ctx[0]];

    	let contentloader_props = {
    		$$slots: { default: [create_default_slot$2] },
    		$$scope: { ctx }
    	};

    	for (let i = 0; i < contentloader_spread_levels.length; i += 1) {
    		contentloader_props = assign(contentloader_props, contentloader_spread_levels[i]);
    	}

    	const contentloader = new ContentLoader({ props: contentloader_props });

    	return {
    		c() {
    			create_component(contentloader.$$.fragment);
    		},
    		m(target, anchor) {
    			mount_component(contentloader, target, anchor);
    			current = true;
    		},
    		p(ctx, [dirty]) {
    			const contentloader_changes = (dirty & /*$$props*/ 1)
    			? get_spread_update(contentloader_spread_levels, [get_spread_object(/*$$props*/ ctx[0])])
    			: {};

    			if (dirty & /*$$scope*/ 2) {
    				contentloader_changes.$$scope = { dirty, ctx };
    			}

    			contentloader.$set(contentloader_changes);
    		},
    		i(local) {
    			if (current) return;
    			transition_in(contentloader.$$.fragment, local);
    			current = true;
    		},
    		o(local) {
    			transition_out(contentloader.$$.fragment, local);
    			current = false;
    		},
    		d(detaching) {
    			destroy_component(contentloader, detaching);
    		}
    	};
    }

    function instance$3($$self, $$props, $$invalidate) {
    	$$self.$set = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    	};

    	$$props = exclude_internal_props($$props);
    	return [$$props];
    }

    class FacebookLoader extends SvelteComponent {
    	constructor(options) {
    		super();
    		init(this, options, instance$3, create_fragment$3, safe_not_equal, {});
    	}
    }

    /* src/ListLoader.svelte generated by Svelte v3.20.1 */

    function create_default_slot$3(ctx) {
    	let rect0;
    	let t0;
    	let rect1;
    	let t1;
    	let rect2;
    	let t2;
    	let rect3;
    	let t3;
    	let rect4;
    	let t4;
    	let rect5;

    	return {
    		c() {
    			rect0 = svg_element("rect");
    			t0 = space();
    			rect1 = svg_element("rect");
    			t1 = space();
    			rect2 = svg_element("rect");
    			t2 = space();
    			rect3 = svg_element("rect");
    			t3 = space();
    			rect4 = svg_element("rect");
    			t4 = space();
    			rect5 = svg_element("rect");
    			attr(rect0, "x", "0");
    			attr(rect0, "y", "0");
    			attr(rect0, "rx", "3");
    			attr(rect0, "ry", "3");
    			attr(rect0, "width", "250");
    			attr(rect0, "height", "10");
    			attr(rect1, "x", "20");
    			attr(rect1, "y", "20");
    			attr(rect1, "rx", "3");
    			attr(rect1, "ry", "3");
    			attr(rect1, "width", "220");
    			attr(rect1, "height", "10");
    			attr(rect2, "x", "20");
    			attr(rect2, "y", "40");
    			attr(rect2, "rx", "3");
    			attr(rect2, "ry", "3");
    			attr(rect2, "width", "170");
    			attr(rect2, "height", "10");
    			attr(rect3, "x", "0");
    			attr(rect3, "y", "60");
    			attr(rect3, "rx", "3");
    			attr(rect3, "ry", "3");
    			attr(rect3, "width", "250");
    			attr(rect3, "height", "10");
    			attr(rect4, "x", "20");
    			attr(rect4, "y", "80");
    			attr(rect4, "rx", "3");
    			attr(rect4, "ry", "3");
    			attr(rect4, "width", "200");
    			attr(rect4, "height", "10");
    			attr(rect5, "x", "20");
    			attr(rect5, "y", "100");
    			attr(rect5, "rx", "3");
    			attr(rect5, "ry", "3");
    			attr(rect5, "width", "80");
    			attr(rect5, "height", "10");
    		},
    		m(target, anchor) {
    			insert(target, rect0, anchor);
    			insert(target, t0, anchor);
    			insert(target, rect1, anchor);
    			insert(target, t1, anchor);
    			insert(target, rect2, anchor);
    			insert(target, t2, anchor);
    			insert(target, rect3, anchor);
    			insert(target, t3, anchor);
    			insert(target, rect4, anchor);
    			insert(target, t4, anchor);
    			insert(target, rect5, anchor);
    		},
    		d(detaching) {
    			if (detaching) detach(rect0);
    			if (detaching) detach(t0);
    			if (detaching) detach(rect1);
    			if (detaching) detach(t1);
    			if (detaching) detach(rect2);
    			if (detaching) detach(t2);
    			if (detaching) detach(rect3);
    			if (detaching) detach(t3);
    			if (detaching) detach(rect4);
    			if (detaching) detach(t4);
    			if (detaching) detach(rect5);
    		}
    	};
    }

    function create_fragment$4(ctx) {
    	let current;
    	const contentloader_spread_levels = [/*$$props*/ ctx[0]];

    	let contentloader_props = {
    		$$slots: { default: [create_default_slot$3] },
    		$$scope: { ctx }
    	};

    	for (let i = 0; i < contentloader_spread_levels.length; i += 1) {
    		contentloader_props = assign(contentloader_props, contentloader_spread_levels[i]);
    	}

    	const contentloader = new ContentLoader({ props: contentloader_props });

    	return {
    		c() {
    			create_component(contentloader.$$.fragment);
    		},
    		m(target, anchor) {
    			mount_component(contentloader, target, anchor);
    			current = true;
    		},
    		p(ctx, [dirty]) {
    			const contentloader_changes = (dirty & /*$$props*/ 1)
    			? get_spread_update(contentloader_spread_levels, [get_spread_object(/*$$props*/ ctx[0])])
    			: {};

    			if (dirty & /*$$scope*/ 2) {
    				contentloader_changes.$$scope = { dirty, ctx };
    			}

    			contentloader.$set(contentloader_changes);
    		},
    		i(local) {
    			if (current) return;
    			transition_in(contentloader.$$.fragment, local);
    			current = true;
    		},
    		o(local) {
    			transition_out(contentloader.$$.fragment, local);
    			current = false;
    		},
    		d(detaching) {
    			destroy_component(contentloader, detaching);
    		}
    	};
    }

    function instance$4($$self, $$props, $$invalidate) {
    	$$self.$set = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    	};

    	$$props = exclude_internal_props($$props);
    	return [$$props];
    }

    class ListLoader extends SvelteComponent {
    	constructor(options) {
    		super();
    		init(this, options, instance$4, create_fragment$4, safe_not_equal, {});
    	}
    }

    /* src/InstagramLoader.svelte generated by Svelte v3.20.1 */

    function create_default_slot$4(ctx) {
    	let circle;
    	let t0;
    	let rect0;
    	let t1;
    	let rect1;
    	let t2;
    	let rect2;

    	return {
    		c() {
    			circle = svg_element("circle");
    			t0 = space();
    			rect0 = svg_element("rect");
    			t1 = space();
    			rect1 = svg_element("rect");
    			t2 = space();
    			rect2 = svg_element("rect");
    			attr(circle, "cx", "30");
    			attr(circle, "cy", "30");
    			attr(circle, "r", "30");
    			attr(rect0, "x", "75");
    			attr(rect0, "y", "13");
    			attr(rect0, "rx", "4");
    			attr(rect0, "ry", "4");
    			attr(rect0, "width", "100");
    			attr(rect0, "height", "13");
    			attr(rect1, "x", "75");
    			attr(rect1, "y", "37");
    			attr(rect1, "rx", "4");
    			attr(rect1, "ry", "4");
    			attr(rect1, "width", "50");
    			attr(rect1, "height", "8");
    			attr(rect2, "x", "0");
    			attr(rect2, "y", "70");
    			attr(rect2, "rx", "5");
    			attr(rect2, "ry", "5");
    			attr(rect2, "width", "400");
    			attr(rect2, "height", "400");
    		},
    		m(target, anchor) {
    			insert(target, circle, anchor);
    			insert(target, t0, anchor);
    			insert(target, rect0, anchor);
    			insert(target, t1, anchor);
    			insert(target, rect1, anchor);
    			insert(target, t2, anchor);
    			insert(target, rect2, anchor);
    		},
    		d(detaching) {
    			if (detaching) detach(circle);
    			if (detaching) detach(t0);
    			if (detaching) detach(rect0);
    			if (detaching) detach(t1);
    			if (detaching) detach(rect1);
    			if (detaching) detach(t2);
    			if (detaching) detach(rect2);
    		}
    	};
    }

    function create_fragment$5(ctx) {
    	let current;
    	const contentloader_spread_levels = [{ height: 480 }, /*$$props*/ ctx[0]];

    	let contentloader_props = {
    		$$slots: { default: [create_default_slot$4] },
    		$$scope: { ctx }
    	};

    	for (let i = 0; i < contentloader_spread_levels.length; i += 1) {
    		contentloader_props = assign(contentloader_props, contentloader_spread_levels[i]);
    	}

    	const contentloader = new ContentLoader({ props: contentloader_props });

    	return {
    		c() {
    			create_component(contentloader.$$.fragment);
    		},
    		m(target, anchor) {
    			mount_component(contentloader, target, anchor);
    			current = true;
    		},
    		p(ctx, [dirty]) {
    			const contentloader_changes = (dirty & /*$$props*/ 1)
    			? get_spread_update(contentloader_spread_levels, [contentloader_spread_levels[0], get_spread_object(/*$$props*/ ctx[0])])
    			: {};

    			if (dirty & /*$$scope*/ 2) {
    				contentloader_changes.$$scope = { dirty, ctx };
    			}

    			contentloader.$set(contentloader_changes);
    		},
    		i(local) {
    			if (current) return;
    			transition_in(contentloader.$$.fragment, local);
    			current = true;
    		},
    		o(local) {
    			transition_out(contentloader.$$.fragment, local);
    			current = false;
    		},
    		d(detaching) {
    			destroy_component(contentloader, detaching);
    		}
    	};
    }

    function instance$5($$self, $$props, $$invalidate) {
    	$$self.$set = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    	};

    	$$props = exclude_internal_props($$props);
    	return [$$props];
    }

    class InstagramLoader extends SvelteComponent {
    	constructor(options) {
    		super();
    		init(this, options, instance$5, create_fragment$5, safe_not_equal, {});
    	}
    }

    /* src/TableLoader.svelte generated by Svelte v3.20.1 */

    function create_default_slot$5(ctx) {
    	let rect0;
    	let t0;
    	let circle0;
    	let t1;
    	let circle1;
    	let t2;
    	let rect1;
    	let t3;
    	let rect2;
    	let t4;
    	let rect3;
    	let t5;
    	let rect4;
    	let t6;
    	let circle2;
    	let t7;
    	let circle3;
    	let t8;
    	let rect5;
    	let t9;
    	let rect6;
    	let t10;
    	let rect7;
    	let t11;
    	let rect8;
    	let t12;
    	let circle4;
    	let t13;
    	let circle5;
    	let t14;
    	let rect9;
    	let t15;
    	let rect10;
    	let t16;
    	let rect11;
    	let t17;
    	let rect12;
    	let t18;
    	let circle6;
    	let t19;
    	let circle7;
    	let t20;
    	let rect13;
    	let t21;
    	let rect14;
    	let t22;
    	let rect15;
    	let t23;
    	let rect16;
    	let t24;
    	let circle8;
    	let t25;
    	let circle9;
    	let t26;
    	let rect17;
    	let t27;
    	let rect18;
    	let t28;
    	let rect19;
    	let t29;
    	let rect20;
    	let t30;
    	let circle10;
    	let t31;
    	let circle11;
    	let t32;
    	let rect21;
    	let t33;
    	let rect22;
    	let t34;
    	let rect23;
    	let t35;
    	let rect24;
    	let t36;
    	let rect25;
    	let t37;
    	let rect26;
    	let t38;
    	let circle12;
    	let t39;
    	let circle13;
    	let t40;
    	let rect27;
    	let t41;
    	let rect28;
    	let t42;
    	let rect29;
    	let t43;
    	let rect30;
    	let t44;
    	let rect31;
    	let t45;
    	let rect32;
    	let t46;
    	let rect33;
    	let t47;
    	let rect34;
    	let t48;
    	let rect35;
    	let t49;
    	let rect36;

    	return {
    		c() {
    			rect0 = svg_element("rect");
    			t0 = space();
    			circle0 = svg_element("circle");
    			t1 = space();
    			circle1 = svg_element("circle");
    			t2 = space();
    			rect1 = svg_element("rect");
    			t3 = space();
    			rect2 = svg_element("rect");
    			t4 = space();
    			rect3 = svg_element("rect");
    			t5 = space();
    			rect4 = svg_element("rect");
    			t6 = space();
    			circle2 = svg_element("circle");
    			t7 = space();
    			circle3 = svg_element("circle");
    			t8 = space();
    			rect5 = svg_element("rect");
    			t9 = space();
    			rect6 = svg_element("rect");
    			t10 = space();
    			rect7 = svg_element("rect");
    			t11 = space();
    			rect8 = svg_element("rect");
    			t12 = space();
    			circle4 = svg_element("circle");
    			t13 = space();
    			circle5 = svg_element("circle");
    			t14 = space();
    			rect9 = svg_element("rect");
    			t15 = space();
    			rect10 = svg_element("rect");
    			t16 = space();
    			rect11 = svg_element("rect");
    			t17 = space();
    			rect12 = svg_element("rect");
    			t18 = space();
    			circle6 = svg_element("circle");
    			t19 = space();
    			circle7 = svg_element("circle");
    			t20 = space();
    			rect13 = svg_element("rect");
    			t21 = space();
    			rect14 = svg_element("rect");
    			t22 = space();
    			rect15 = svg_element("rect");
    			t23 = space();
    			rect16 = svg_element("rect");
    			t24 = space();
    			circle8 = svg_element("circle");
    			t25 = space();
    			circle9 = svg_element("circle");
    			t26 = space();
    			rect17 = svg_element("rect");
    			t27 = space();
    			rect18 = svg_element("rect");
    			t28 = space();
    			rect19 = svg_element("rect");
    			t29 = space();
    			rect20 = svg_element("rect");
    			t30 = space();
    			circle10 = svg_element("circle");
    			t31 = space();
    			circle11 = svg_element("circle");
    			t32 = space();
    			rect21 = svg_element("rect");
    			t33 = space();
    			rect22 = svg_element("rect");
    			t34 = space();
    			rect23 = svg_element("rect");
    			t35 = space();
    			rect24 = svg_element("rect");
    			t36 = space();
    			rect25 = svg_element("rect");
    			t37 = space();
    			rect26 = svg_element("rect");
    			t38 = space();
    			circle12 = svg_element("circle");
    			t39 = space();
    			circle13 = svg_element("circle");
    			t40 = space();
    			rect27 = svg_element("rect");
    			t41 = space();
    			rect28 = svg_element("rect");
    			t42 = space();
    			rect29 = svg_element("rect");
    			t43 = space();
    			rect30 = svg_element("rect");
    			t44 = space();
    			rect31 = svg_element("rect");
    			t45 = space();
    			rect32 = svg_element("rect");
    			t46 = space();
    			rect33 = svg_element("rect");
    			t47 = space();
    			rect34 = svg_element("rect");
    			t48 = space();
    			rect35 = svg_element("rect");
    			t49 = space();
    			rect36 = svg_element("rect");
    			attr(rect0, "x", "51");
    			attr(rect0, "y", "45");
    			attr(rect0, "rx", "3");
    			attr(rect0, "ry", "3");
    			attr(rect0, "width", "906");
    			attr(rect0, "height", "17");
    			attr(circle0, "cx", "879");
    			attr(circle0, "cy", "123");
    			attr(circle0, "r", "11");
    			attr(circle1, "cx", "914");
    			attr(circle1, "cy", "123");
    			attr(circle1, "r", "11");
    			attr(rect1, "x", "104");
    			attr(rect1, "y", "115");
    			attr(rect1, "rx", "3");
    			attr(rect1, "ry", "3");
    			attr(rect1, "width", "141");
    			attr(rect1, "height", "15");
    			attr(rect2, "x", "305");
    			attr(rect2, "y", "114");
    			attr(rect2, "rx", "3");
    			attr(rect2, "ry", "3");
    			attr(rect2, "width", "299");
    			attr(rect2, "height", "15");
    			attr(rect3, "x", "661");
    			attr(rect3, "y", "114");
    			attr(rect3, "rx", "3");
    			attr(rect3, "ry", "3");
    			attr(rect3, "width", "141");
    			attr(rect3, "height", "15");
    			attr(rect4, "x", "55");
    			attr(rect4, "y", "155");
    			attr(rect4, "rx", "3");
    			attr(rect4, "ry", "3");
    			attr(rect4, "width", "897");
    			attr(rect4, "height", "2");
    			attr(circle2, "cx", "880");
    			attr(circle2, "cy", "184");
    			attr(circle2, "r", "11");
    			attr(circle3, "cx", "915");
    			attr(circle3, "cy", "184");
    			attr(circle3, "r", "11");
    			attr(rect5, "x", "105");
    			attr(rect5, "y", "176");
    			attr(rect5, "rx", "3");
    			attr(rect5, "ry", "3");
    			attr(rect5, "width", "141");
    			attr(rect5, "height", "15");
    			attr(rect6, "x", "306");
    			attr(rect6, "y", "175");
    			attr(rect6, "rx", "3");
    			attr(rect6, "ry", "3");
    			attr(rect6, "width", "299");
    			attr(rect6, "height", "15");
    			attr(rect7, "x", "662");
    			attr(rect7, "y", "175");
    			attr(rect7, "rx", "3");
    			attr(rect7, "ry", "3");
    			attr(rect7, "width", "141");
    			attr(rect7, "height", "15");
    			attr(rect8, "x", "56");
    			attr(rect8, "y", "216");
    			attr(rect8, "rx", "3");
    			attr(rect8, "ry", "3");
    			attr(rect8, "width", "897");
    			attr(rect8, "height", "2");
    			attr(circle4, "cx", "881");
    			attr(circle4, "cy", "242");
    			attr(circle4, "r", "11");
    			attr(circle5, "cx", "916");
    			attr(circle5, "cy", "242");
    			attr(circle5, "r", "11");
    			attr(rect9, "x", "106");
    			attr(rect9, "y", "234");
    			attr(rect9, "rx", "3");
    			attr(rect9, "ry", "3");
    			attr(rect9, "width", "141");
    			attr(rect9, "height", "15");
    			attr(rect10, "x", "307");
    			attr(rect10, "y", "233");
    			attr(rect10, "rx", "3");
    			attr(rect10, "ry", "3");
    			attr(rect10, "width", "299");
    			attr(rect10, "height", "15");
    			attr(rect11, "x", "663");
    			attr(rect11, "y", "233");
    			attr(rect11, "rx", "3");
    			attr(rect11, "ry", "3");
    			attr(rect11, "width", "141");
    			attr(rect11, "height", "15");
    			attr(rect12, "x", "57");
    			attr(rect12, "y", "274");
    			attr(rect12, "rx", "3");
    			attr(rect12, "ry", "3");
    			attr(rect12, "width", "897");
    			attr(rect12, "height", "2");
    			attr(circle6, "cx", "882");
    			attr(circle6, "cy", "303");
    			attr(circle6, "r", "11");
    			attr(circle7, "cx", "917");
    			attr(circle7, "cy", "303");
    			attr(circle7, "r", "11");
    			attr(rect13, "x", "107");
    			attr(rect13, "y", "295");
    			attr(rect13, "rx", "3");
    			attr(rect13, "ry", "3");
    			attr(rect13, "width", "141");
    			attr(rect13, "height", "15");
    			attr(rect14, "x", "308");
    			attr(rect14, "y", "294");
    			attr(rect14, "rx", "3");
    			attr(rect14, "ry", "3");
    			attr(rect14, "width", "299");
    			attr(rect14, "height", "15");
    			attr(rect15, "x", "664");
    			attr(rect15, "y", "294");
    			attr(rect15, "rx", "3");
    			attr(rect15, "ry", "3");
    			attr(rect15, "width", "141");
    			attr(rect15, "height", "15");
    			attr(rect16, "x", "58");
    			attr(rect16, "y", "335");
    			attr(rect16, "rx", "3");
    			attr(rect16, "ry", "3");
    			attr(rect16, "width", "897");
    			attr(rect16, "height", "2");
    			attr(circle8, "cx", "881");
    			attr(circle8, "cy", "363");
    			attr(circle8, "r", "11");
    			attr(circle9, "cx", "916");
    			attr(circle9, "cy", "363");
    			attr(circle9, "r", "11");
    			attr(rect17, "x", "106");
    			attr(rect17, "y", "355");
    			attr(rect17, "rx", "3");
    			attr(rect17, "ry", "3");
    			attr(rect17, "width", "141");
    			attr(rect17, "height", "15");
    			attr(rect18, "x", "307");
    			attr(rect18, "y", "354");
    			attr(rect18, "rx", "3");
    			attr(rect18, "ry", "3");
    			attr(rect18, "width", "299");
    			attr(rect18, "height", "15");
    			attr(rect19, "x", "663");
    			attr(rect19, "y", "354");
    			attr(rect19, "rx", "3");
    			attr(rect19, "ry", "3");
    			attr(rect19, "width", "141");
    			attr(rect19, "height", "15");
    			attr(rect20, "x", "57");
    			attr(rect20, "y", "395");
    			attr(rect20, "rx", "3");
    			attr(rect20, "ry", "3");
    			attr(rect20, "width", "897");
    			attr(rect20, "height", "2");
    			attr(circle10, "cx", "882");
    			attr(circle10, "cy", "424");
    			attr(circle10, "r", "11");
    			attr(circle11, "cx", "917");
    			attr(circle11, "cy", "424");
    			attr(circle11, "r", "11");
    			attr(rect21, "x", "107");
    			attr(rect21, "y", "416");
    			attr(rect21, "rx", "3");
    			attr(rect21, "ry", "3");
    			attr(rect21, "width", "141");
    			attr(rect21, "height", "15");
    			attr(rect22, "x", "308");
    			attr(rect22, "y", "415");
    			attr(rect22, "rx", "3");
    			attr(rect22, "ry", "3");
    			attr(rect22, "width", "299");
    			attr(rect22, "height", "15");
    			attr(rect23, "x", "664");
    			attr(rect23, "y", "415");
    			attr(rect23, "rx", "3");
    			attr(rect23, "ry", "3");
    			attr(rect23, "width", "141");
    			attr(rect23, "height", "15");
    			attr(rect24, "x", "55");
    			attr(rect24, "y", "453");
    			attr(rect24, "rx", "3");
    			attr(rect24, "ry", "3");
    			attr(rect24, "width", "897");
    			attr(rect24, "height", "2");
    			attr(rect25, "x", "51");
    			attr(rect25, "y", "49");
    			attr(rect25, "rx", "3");
    			attr(rect25, "ry", "3");
    			attr(rect25, "width", "2");
    			attr(rect25, "height", "465");
    			attr(rect26, "x", "955");
    			attr(rect26, "y", "49");
    			attr(rect26, "rx", "3");
    			attr(rect26, "ry", "3");
    			attr(rect26, "width", "2");
    			attr(rect26, "height", "465");
    			attr(circle12, "cx", "882");
    			attr(circle12, "cy", "484");
    			attr(circle12, "r", "11");
    			attr(circle13, "cx", "917");
    			attr(circle13, "cy", "484");
    			attr(circle13, "r", "11");
    			attr(rect27, "x", "107");
    			attr(rect27, "y", "476");
    			attr(rect27, "rx", "3");
    			attr(rect27, "ry", "3");
    			attr(rect27, "width", "141");
    			attr(rect27, "height", "15");
    			attr(rect28, "x", "308");
    			attr(rect28, "y", "475");
    			attr(rect28, "rx", "3");
    			attr(rect28, "ry", "3");
    			attr(rect28, "width", "299");
    			attr(rect28, "height", "15");
    			attr(rect29, "x", "664");
    			attr(rect29, "y", "475");
    			attr(rect29, "rx", "3");
    			attr(rect29, "ry", "3");
    			attr(rect29, "width", "141");
    			attr(rect29, "height", "15");
    			attr(rect30, "x", "55");
    			attr(rect30, "y", "513");
    			attr(rect30, "rx", "3");
    			attr(rect30, "ry", "3");
    			attr(rect30, "width", "897");
    			attr(rect30, "height", "2");
    			attr(rect31, "x", "52");
    			attr(rect31, "y", "80");
    			attr(rect31, "rx", "3");
    			attr(rect31, "ry", "3");
    			attr(rect31, "width", "906");
    			attr(rect31, "height", "17");
    			attr(rect32, "x", "53");
    			attr(rect32, "y", "57");
    			attr(rect32, "rx", "3");
    			attr(rect32, "ry", "3");
    			attr(rect32, "width", "68");
    			attr(rect32, "height", "33");
    			attr(rect33, "x", "222");
    			attr(rect33, "y", "54");
    			attr(rect33, "rx", "3");
    			attr(rect33, "ry", "3");
    			attr(rect33, "width", "149");
    			attr(rect33, "height", "33");
    			attr(rect34, "x", "544");
    			attr(rect34, "y", "55");
    			attr(rect34, "rx", "3");
    			attr(rect34, "ry", "3");
    			attr(rect34, "width", "137");
    			attr(rect34, "height", "33");
    			attr(rect35, "x", "782");
    			attr(rect35, "y", "56");
    			attr(rect35, "rx", "3");
    			attr(rect35, "ry", "3");
    			attr(rect35, "width", "72");
    			attr(rect35, "height", "33");
    			attr(rect36, "x", "933");
    			attr(rect36, "y", "54");
    			attr(rect36, "rx", "3");
    			attr(rect36, "ry", "3");
    			attr(rect36, "width", "24");
    			attr(rect36, "height", "33");
    		},
    		m(target, anchor) {
    			insert(target, rect0, anchor);
    			insert(target, t0, anchor);
    			insert(target, circle0, anchor);
    			insert(target, t1, anchor);
    			insert(target, circle1, anchor);
    			insert(target, t2, anchor);
    			insert(target, rect1, anchor);
    			insert(target, t3, anchor);
    			insert(target, rect2, anchor);
    			insert(target, t4, anchor);
    			insert(target, rect3, anchor);
    			insert(target, t5, anchor);
    			insert(target, rect4, anchor);
    			insert(target, t6, anchor);
    			insert(target, circle2, anchor);
    			insert(target, t7, anchor);
    			insert(target, circle3, anchor);
    			insert(target, t8, anchor);
    			insert(target, rect5, anchor);
    			insert(target, t9, anchor);
    			insert(target, rect6, anchor);
    			insert(target, t10, anchor);
    			insert(target, rect7, anchor);
    			insert(target, t11, anchor);
    			insert(target, rect8, anchor);
    			insert(target, t12, anchor);
    			insert(target, circle4, anchor);
    			insert(target, t13, anchor);
    			insert(target, circle5, anchor);
    			insert(target, t14, anchor);
    			insert(target, rect9, anchor);
    			insert(target, t15, anchor);
    			insert(target, rect10, anchor);
    			insert(target, t16, anchor);
    			insert(target, rect11, anchor);
    			insert(target, t17, anchor);
    			insert(target, rect12, anchor);
    			insert(target, t18, anchor);
    			insert(target, circle6, anchor);
    			insert(target, t19, anchor);
    			insert(target, circle7, anchor);
    			insert(target, t20, anchor);
    			insert(target, rect13, anchor);
    			insert(target, t21, anchor);
    			insert(target, rect14, anchor);
    			insert(target, t22, anchor);
    			insert(target, rect15, anchor);
    			insert(target, t23, anchor);
    			insert(target, rect16, anchor);
    			insert(target, t24, anchor);
    			insert(target, circle8, anchor);
    			insert(target, t25, anchor);
    			insert(target, circle9, anchor);
    			insert(target, t26, anchor);
    			insert(target, rect17, anchor);
    			insert(target, t27, anchor);
    			insert(target, rect18, anchor);
    			insert(target, t28, anchor);
    			insert(target, rect19, anchor);
    			insert(target, t29, anchor);
    			insert(target, rect20, anchor);
    			insert(target, t30, anchor);
    			insert(target, circle10, anchor);
    			insert(target, t31, anchor);
    			insert(target, circle11, anchor);
    			insert(target, t32, anchor);
    			insert(target, rect21, anchor);
    			insert(target, t33, anchor);
    			insert(target, rect22, anchor);
    			insert(target, t34, anchor);
    			insert(target, rect23, anchor);
    			insert(target, t35, anchor);
    			insert(target, rect24, anchor);
    			insert(target, t36, anchor);
    			insert(target, rect25, anchor);
    			insert(target, t37, anchor);
    			insert(target, rect26, anchor);
    			insert(target, t38, anchor);
    			insert(target, circle12, anchor);
    			insert(target, t39, anchor);
    			insert(target, circle13, anchor);
    			insert(target, t40, anchor);
    			insert(target, rect27, anchor);
    			insert(target, t41, anchor);
    			insert(target, rect28, anchor);
    			insert(target, t42, anchor);
    			insert(target, rect29, anchor);
    			insert(target, t43, anchor);
    			insert(target, rect30, anchor);
    			insert(target, t44, anchor);
    			insert(target, rect31, anchor);
    			insert(target, t45, anchor);
    			insert(target, rect32, anchor);
    			insert(target, t46, anchor);
    			insert(target, rect33, anchor);
    			insert(target, t47, anchor);
    			insert(target, rect34, anchor);
    			insert(target, t48, anchor);
    			insert(target, rect35, anchor);
    			insert(target, t49, anchor);
    			insert(target, rect36, anchor);
    		},
    		d(detaching) {
    			if (detaching) detach(rect0);
    			if (detaching) detach(t0);
    			if (detaching) detach(circle0);
    			if (detaching) detach(t1);
    			if (detaching) detach(circle1);
    			if (detaching) detach(t2);
    			if (detaching) detach(rect1);
    			if (detaching) detach(t3);
    			if (detaching) detach(rect2);
    			if (detaching) detach(t4);
    			if (detaching) detach(rect3);
    			if (detaching) detach(t5);
    			if (detaching) detach(rect4);
    			if (detaching) detach(t6);
    			if (detaching) detach(circle2);
    			if (detaching) detach(t7);
    			if (detaching) detach(circle3);
    			if (detaching) detach(t8);
    			if (detaching) detach(rect5);
    			if (detaching) detach(t9);
    			if (detaching) detach(rect6);
    			if (detaching) detach(t10);
    			if (detaching) detach(rect7);
    			if (detaching) detach(t11);
    			if (detaching) detach(rect8);
    			if (detaching) detach(t12);
    			if (detaching) detach(circle4);
    			if (detaching) detach(t13);
    			if (detaching) detach(circle5);
    			if (detaching) detach(t14);
    			if (detaching) detach(rect9);
    			if (detaching) detach(t15);
    			if (detaching) detach(rect10);
    			if (detaching) detach(t16);
    			if (detaching) detach(rect11);
    			if (detaching) detach(t17);
    			if (detaching) detach(rect12);
    			if (detaching) detach(t18);
    			if (detaching) detach(circle6);
    			if (detaching) detach(t19);
    			if (detaching) detach(circle7);
    			if (detaching) detach(t20);
    			if (detaching) detach(rect13);
    			if (detaching) detach(t21);
    			if (detaching) detach(rect14);
    			if (detaching) detach(t22);
    			if (detaching) detach(rect15);
    			if (detaching) detach(t23);
    			if (detaching) detach(rect16);
    			if (detaching) detach(t24);
    			if (detaching) detach(circle8);
    			if (detaching) detach(t25);
    			if (detaching) detach(circle9);
    			if (detaching) detach(t26);
    			if (detaching) detach(rect17);
    			if (detaching) detach(t27);
    			if (detaching) detach(rect18);
    			if (detaching) detach(t28);
    			if (detaching) detach(rect19);
    			if (detaching) detach(t29);
    			if (detaching) detach(rect20);
    			if (detaching) detach(t30);
    			if (detaching) detach(circle10);
    			if (detaching) detach(t31);
    			if (detaching) detach(circle11);
    			if (detaching) detach(t32);
    			if (detaching) detach(rect21);
    			if (detaching) detach(t33);
    			if (detaching) detach(rect22);
    			if (detaching) detach(t34);
    			if (detaching) detach(rect23);
    			if (detaching) detach(t35);
    			if (detaching) detach(rect24);
    			if (detaching) detach(t36);
    			if (detaching) detach(rect25);
    			if (detaching) detach(t37);
    			if (detaching) detach(rect26);
    			if (detaching) detach(t38);
    			if (detaching) detach(circle12);
    			if (detaching) detach(t39);
    			if (detaching) detach(circle13);
    			if (detaching) detach(t40);
    			if (detaching) detach(rect27);
    			if (detaching) detach(t41);
    			if (detaching) detach(rect28);
    			if (detaching) detach(t42);
    			if (detaching) detach(rect29);
    			if (detaching) detach(t43);
    			if (detaching) detach(rect30);
    			if (detaching) detach(t44);
    			if (detaching) detach(rect31);
    			if (detaching) detach(t45);
    			if (detaching) detach(rect32);
    			if (detaching) detach(t46);
    			if (detaching) detach(rect33);
    			if (detaching) detach(t47);
    			if (detaching) detach(rect34);
    			if (detaching) detach(t48);
    			if (detaching) detach(rect35);
    			if (detaching) detach(t49);
    			if (detaching) detach(rect36);
    		}
    	};
    }

    function create_fragment$6(ctx) {
    	let current;
    	const contentloader_spread_levels = [/*$$props*/ ctx[0]];

    	let contentloader_props = {
    		$$slots: { default: [create_default_slot$5] },
    		$$scope: { ctx }
    	};

    	for (let i = 0; i < contentloader_spread_levels.length; i += 1) {
    		contentloader_props = assign(contentloader_props, contentloader_spread_levels[i]);
    	}

    	const contentloader = new ContentLoader$1({ props: contentloader_props });

    	return {
    		c() {
    			create_component(contentloader.$$.fragment);
    		},
    		m(target, anchor) {
    			mount_component(contentloader, target, anchor);
    			current = true;
    		},
    		p(ctx, [dirty]) {
    			const contentloader_changes = (dirty & /*$$props*/ 1)
    			? get_spread_update(contentloader_spread_levels, [get_spread_object(/*$$props*/ ctx[0])])
    			: {};

    			if (dirty & /*$$scope*/ 2) {
    				contentloader_changes.$$scope = { dirty, ctx };
    			}

    			contentloader.$set(contentloader_changes);
    		},
    		i(local) {
    			if (current) return;
    			transition_in(contentloader.$$.fragment, local);
    			current = true;
    		},
    		o(local) {
    			transition_out(contentloader.$$.fragment, local);
    			current = false;
    		},
    		d(detaching) {
    			destroy_component(contentloader, detaching);
    		}
    	};
    }

    function instance$6($$self, $$props, $$invalidate) {
    	$$self.$set = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    	};

    	$$props = exclude_internal_props($$props);
    	return [$$props];
    }

    class TableLoader extends SvelteComponent {
    	constructor(options) {
    		super();
    		init(this, options, instance$6, create_fragment$6, safe_not_equal, {});
    	}
    }

    exports.BulletListLoader = BulletListLoader;
    exports.CodeLoader = CodeLoader;
    exports.FacebookLoader = FacebookLoader;
    exports.InstagramLoader = InstagramLoader;
    exports.ListLoader = ListLoader;
    exports.TableLoader = TableLoader;
    exports.default = ContentLoader;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
